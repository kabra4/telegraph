// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id          BigInt     @id @db.BigInt
  language    String?
  active      Boolean?
  last_active DateTime?
  type        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tasks       Task[]
  feedbacks   Feedback[]
}

model User {
  id              BigInt     @id @db.BigInt
  name            String?
  last_name       String?
  username        String?
  phone_number    Int?
  language        String?
  task_options    Json?
  active          Boolean?
  currently_doing String?
  last_active     DateTime?
  superuser       Boolean?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  tasks           Task[]
  goals           Hobby[]
  feedbacks       Feedback[]
}

model Task {
  id                  BigInt   @id @default(autoincrement()) @db.BigInt
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  is_beforehand       Boolean?
  beforehand_owner_id BigInt?  @unique @db.BigInt
  name                String?
  chat_id             BigInt?  @db.BigInt
  user_id             BigInt?  @db.BigInt
  group_id            Int?
  hobby_id            Int?     @unique

  repeat_scheme               RepeatScheme?
  is_active                   Boolean?
  trigger_timestamp           DateTime?
  last_triggered_timestamp    DateTime?
  trigger_count               Int?
  max_trigger_count           Int?
  action_type                 String?
  has_beforehand_notification Boolean?
  beforehand_seconds          Int?
  content_text                String?
  beforehand_task             Task?         @relation("TaskOwner")
  beforehand_owner            Task?         @relation("TaskOwner", fields: [beforehand_owner_id], references: [id], onDelete: Cascade)
  chat                        Chat?         @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  user                        User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hobby                       Hobby?        @relation(fields: [hobby_id], references: [id], onDelete: Cascade)
}

model Hobby {
  id         Int        @id @default(autoincrement())
  user_id    BigInt     @db.BigInt
  name       String     @default("")
  answers    String[]
  user       User?      @relation(fields: [user_id], references: [id])
  task       Task?
  hobby_logs HobbyLog[]
}

model HobbyLog {
  id         Int      @id @default(autoincrement())
  hobby_id   Int
  response   String?
  registered DateTime @default(now())
  hobby      Hobby?   @relation(fields: [hobby_id], references: [id], onDelete: Cascade)
}

model Feedback {
  id      Int     @id @default(autoincrement())
  user_id BigInt? @db.BigInt
  chat_id BigInt? @db.BigInt
  content String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat    Chat?   @relation(fields: [chat_id], references: [id], onDelete: Cascade)
}

model RepeatScheme {
  id               Int      @id @default(autoincrement())
  days_of_week     Int[]
  days_of_month    Int[]
  is_repeatable    Boolean?
  repeat_type      String?
  trigger_time     String[]
  trigger_date     String?
  custom_time      String[]
  interval_seconds Int?
  tasks_id         BigInt   @unique @db.BigInt
  tasks            Task?    @relation(fields: [tasks_id], references: [id], onDelete: Cascade)
}
